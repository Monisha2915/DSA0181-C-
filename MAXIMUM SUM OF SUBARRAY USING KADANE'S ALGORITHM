#include <iostream>
#include <climits>
using namespace std;

// Function to find the subarray with the maximum sum using Kadane’s Algorithm
int kadaneAlgorithm(int arr[], int n) {
    int maxSoFar = INT_MIN;  // Initialize to the smallest integer value
    int maxEndingHere = 0;   // Maximum sum that ends at the current index

    for (int i = 0; i < n; i++) {
        maxEndingHere += arr[i];  // Add the current element to the current subarray sum
        
        // Update maxSoFar if maxEndingHere is greater than maxSoFar
        if (maxEndingHere > maxSoFar) {
            maxSoFar = maxEndingHere;
        }

        // If maxEndingHere becomes negative, reset it to 0
        if (maxEndingHere < 0) {
            maxEndingHere = 0;
        }
    }

    return maxSoFar;  // Return the maximum sum found
}

int main() {
    int n;

    // Input: number of elements in the array
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    int arr[n];

    // Input: array elements
    cout << "Enter " << n << " elements:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Find the maximum sum of a subarray using Kadane’s Algorithm
    int maxSum = kadaneAlgorithm(arr, n);

    // Output the maximum sum
    cout << "The maximum sum of a subarray is: " << maxSum << endl;

    return 0;
}
