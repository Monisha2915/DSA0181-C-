#include <iostream>
#include <vector>
using namespace std;

// Function to find the first occurrence of the target value
int findFirstOccurrence(const vector<int>& arr, int target) {
    int left = 0, right = arr.size() - 1, result = -1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target) {
            result = mid; // Update result and continue searching to the left
            right = mid - 1;
        } else if (arr[mid] > target) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    return result;
}

// Function to find the last occurrence of the target value
int findLastOccurrence(const vector<int>& arr, int target) {
    int left = 0, right = arr.size() - 1, result = -1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target) {
            result = mid; // Update result and continue searching to the right
            left = mid + 1;
        } else if (arr[mid] > target) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    return result;
}

int main() {
    int n, target;

    // Input the size of the array
    cout << "Enter the size of the array: ";
    cin >> n;

    vector<int> arr(n);

    // Input the sorted array elements
    cout << "Enter the sorted array elements:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Input the target value to search
    cout << "Enter the target value: ";
    cin >> target;

    // Find the first and last occurrences
    int first = findFirstOccurrence(arr, target);
    int last = findLastOccurrence(arr, target);

    // Output the result
    if (first != -1) {
        cout << "First occurrence of " << target << " is at index: " << first << endl;
        cout << "Last occurrence of " << target << " is at index: " << last << endl;
    } else {
        cout << "Target value not found in the array." << endl;
    }

    return 0;
}
